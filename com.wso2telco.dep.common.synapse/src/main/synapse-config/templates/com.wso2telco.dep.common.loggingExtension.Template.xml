<?xml version="1.0" encoding="UTF-8"?>
<template name="com.wso2telco.dep.common.loggingExtension.Template" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="direction"/>
    <sequence>
        <property expression="get-property('registry', 'conf:/repository/wso2telco/configurations/mediationConfig.xml')" name="mediationConfig" scope="default" type="OM"/>
        <property expression="$ctx:mediationConfig//payload_logging_enabled" name="payloadLoggingEnabled" scope="default" type="STRING"/>
        <property expression="fn:normalize-space($ctx:payloadLoggingEnabled)" name="payloadLoggingEnabled" scope="default" type="STRING"/>
        <property expression="fn:normalize-space($func:direction)" name="direction" scope="default" type="STRING"/>
        
        <filter regex="^(?i)(true|false)$" source="$ctx:payloadLoggingEnabled">
        	<then/>
        	<else>
        		<property value="false" name="payloadLoggingEnabled" scope="default" type="STRING"/>
        	</else>
        </filter>

        <property expression="$ctx:mediationConfig//logging_extension_enabled" name="loggingExtensionEnabled" scope="default" type="STRING"/>
        <property expression="fn:normalize-space($ctx:loggingExtensionEnabled)" name="loggingExtensionEnabled" scope="default" type="STRING"/>

        <filter regex="^(?i)(true|false)$" source="$ctx:loggingExtensionEnabled">
            <then/>
            <else>
                <property value="false" name="loggingExtensionEnabled" scope="default" type="STRING"/>
            </else>
        </filter>
        <filter xpath="boolean($ctx:requestIdForLogging)">
        	<then/>
        	<else>
        		<filter xpath="boolean($ctx:REQUEST_ID)">
		        	<then>
		        		<property expression="$ctx:REQUEST_ID" name="requestIdForLogging" scope="default" type="STRING"/>
		        	</then>
		        	<else>
		        		<property expression="$trp:REQUEST_ID" name="requestIdForLogging" scope="default" type="STRING"/>
		        	</else>
	        	</filter>
        	</else>
        </filter>

        <filter regex="^(?i)(true)$" source="get-property('loggingExtensionEnabled')">
            <then>
                <switch source="$ctx:direction">
                    <case regex="REQUESTIN">
                        <property expression="fn:concat('[',get-property('SYSTEM_DATE','yyyy-MM-dd HH:mm:ss'),'] >>>>> API Request id:', $ctx:requestIdForLogging)" name="requestDetails" scope="default" type="STRING"/>
                        <log level="custom">
                            <property expression="get-property('requestDetails')" name="###REQUESTIN_INFO###"/>
                        </log>
                        <filter regex="^(?i)(true)$" source="get-property('payloadLoggingEnabled')">
                            <then>
                            	<property expression="json-eval($.)" name="reqData" scope="default" type="STRING"/>
                                <log level="custom">
                                    <property expression="fn:concat(get-property('requestDetails'), ' >>>>> API Request body:', get-property('reqData'))" name="###REQUESTIN_INFO### >>>>> Request In:"/>
                                </log>
                            </then>
                            <else/>
                        </filter>
                    </case>
                    <case regex="REQUESTOUT">
                        <property expression="fn:concat('[',get-property('SYSTEM_DATE','yyyy-MM-dd HH:mm:ss'),'] >>>>> API Request id:', $ctx:requestIdForLogging)" name="requestDetails" scope="default" type="STRING"/>
                        <log level="custom">
                            <property expression="get-property('requestDetails')" name="###REQUESTOUT_INFO###"/>
                        </log>
                        <filter regex="^(?i)(true)$" source="get-property('payloadLoggingEnabled')">
                            <then>
                            	<property expression="json-eval($.)" name="reqData" scope="default" type="STRING"/>
                                <log level="custom">
                                    <property expression="fn:concat(get-property('requestDetails'), ' >>>>> API Request body:', get-property('reqData'))" name="###REQUESTOUT_INFO### >>>>> request Out:"/>
                                </log>
                            </then>
                            <else/>
                        </filter>
                    </case>
                    <case regex="RESPONSEIN">
                        <property expression="fn:concat('[',get-property('SYSTEM_DATE','yyyy-MM-dd HH:mm:ss'),'] &lt;&lt;&lt;&lt;&lt; API Request id ', $ctx:requestIdForLogging)" name="requestDetails" scope="default" type="STRING"/>
                        <log level="custom">
                            <property expression="get-property('requestDetails')" name="###RESPONSEIN_INFO###"/>
                        </log>
                        <filter regex="^(?i)(true)$" source="get-property('payloadLoggingEnabled')">
                            <then>
                            	<property expression="json-eval($.)" name="respData" scope="default" type="STRING"/>
                                <log level="custom">
                                    <property expression="fn:concat(get-property('requestDetails'), get-property('axis2', 'HTTP_SC'))" name="###RESPONSEIN_INFO### &lt;&lt;&lt;&lt;&lt; HTTP_STATUS_CODE" scope="default" type="STRING"/>
                                </log>
                                <log level="custom">
                                    <property expression="fn:concat(get-property('requestDetails'), ' >>>>> API Response body:', get-property('respData'))" name="###RESPONSEIN_INFO### &lt;&lt;&lt;&lt;&lt; response In:"/>
                                </log>
                            </then>
                            <else/>
                        </filter>
                    </case>
                    <case regex="RESPONSEOUT">
                        <property expression="fn:concat('[',get-property('SYSTEM_DATE','yyyy-MM-dd HH:mm:ss'),'] &lt;&lt;&lt;&lt;&lt; API Request id ', $ctx:requestIdForLogging)" name="requestDetails" scope="default" type="STRING"/>
                        <log level="custom">
                            <property expression="get-property('requestDetails')" name="###RESPONSEOUT_INFO###"/>
                        </log>
                        <filter regex="^(?i)(true)$" source="get-property('payloadLoggingEnabled')">
                            <then>
                            	<property expression="json-eval($.)" name="respData" scope="default" type="STRING"/>
                                <log level="custom">
                                    <property expression="fn:concat(get-property('requestDetails'), ' >>>>> API Response body:', get-property('respData'))" name="###RESPONSEOUT_INFO### &lt;&lt;&lt;&lt;&lt; response Out:"/>
                                </log>
                            </then>
                            <else/>
                        </filter>
                    </case>
                    <case regex="FAULTIN">
                        <property
                                expression="fn:concat('[',get-property('SYSTEM_DATE','yyyy-MM-dd HH:mm:ss'),'] &lt;&lt;&lt;&lt;&lt; API Request id ', $ctx:requestIdForLogging)"
                                name="requestDetails" scope="default" type="STRING"/>
                        <log level="custom">
                            <property expression="get-property('requestDetails')" name="###EXECUTING FAULT scenario-commonFault ###"/>
                        </log>
                        <filter regex="^(?i)(true)$" source="get-property('payloadLoggingEnabled')">
                            <then>
                            	<property expression="json-eval($.)" name="faultData" scope="default" type="STRING"/>
                                <log level="custom">
                                    <property expression="fn:concat(get-property('requestDetails'), get-property('axis2', 'HTTP_SC'))" name="###EXECUTING FAULT scenario-commonFault### &lt;&lt;&lt;&lt;&lt; HTTP_STATUS_CODE" scope="default" type="STRING"/>
                                </log>
                                <log level="custom">
                                    <property expression="fn:concat(get-property('requestDetails'), ' >>>>> API Response body:', get-property('faultData'))" name="###EXECUTING FAULT scenario-commonFault### &lt;&lt;&lt;&lt;&lt; response Out:"/>
                                </log>
                            </then>
                            <else/>
                        </filter>
                    </case>
                    <default>
                        <log category="ERROR" description="" level="custom">
                            <property name="Log Extension Sequence" expression="fn:concat('Invalid Direction for request/response details logging. Direction: ', $ctx:direction)"/>
                        </log>
                    </default>
                </switch>
            </then>
            <else/>
        </filter>
    </sequence>
</template>
