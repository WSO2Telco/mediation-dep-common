<?xml version="1.0" encoding="UTF-8"?>
<template name="com.wso2telco.dep.common.msisdnValidator.Template" xmlns="http://ws.apache.org/ns/synapse">
  <parameter name="paramName"/>
  <parameter name="paramValue"/>
  <parameter name="paramArray"/>

  <!-- In case of validating an array use a for each mediator in your sequence and call this template with each of the msisdn array element.
    Specify paramArray just to create the message body of the error response -->
  <sequence>
    <property expression="get-property('registry', 'conf:/repository/wso2telco/configurations/mediationConfig.xml')" name="mediationConfig" scope="default" type="OM"/>
    <property expression="$ctx:mediationConfig//msisdn_regex" name="msisdnRegex" scope="default" type="STRING"/>
    <property expression="$ctx:mediationConfig//msisdn_regex_num_grp" name="msisdnRegexGroup" scope="default" type="STRING"/>
    <property expression="$func:paramValue" name="paramValue" scope="default" type="STRING"/>
    <property expression="$trp:APPLICATION_ID" name="api.ut.application.id" scope="default" type="STRING"/>


    <class name="org.wso2telco.dep.nashornmediator.NashornMediator">
      <property name="script" value="
            var isValidMsisdn = false;
	    	var paramValue = mc.getProperty('paramValue');
			var regExp = new RegExp(mc.getProperty('msisdnRegex'));

			var isValidMsisdn = regExp.test(paramValue);
			mc.setProperty('isValidMsisdn', isValidMsisdn);
      "/>
    </class>

    <filter regex="^false$" source="$ctx:isValidMsisdn">
      <then>
        <log category="ERROR" level="full">
          <property name="ERROR" value="returning error response"/>
        </log>
        <property name="messageId" scope="default" type="STRING" value="SVC0004"/>
        <property expression="fn:concat($func:paramName, ' format invalid. %1')" name="errorText" scope="default" type="STRING"/>
        <property name="httpStatusCode" scope="default" type="STRING" value="400"/>

        <filter xpath="boolean($func:paramArray)">
          <then>
            <filter regex="true" source="get-property('USER_ANONYMIZATION')">
              <then>
                <property expression="get-property('MASKED_MSISDN_LIST')" name="errorVariable" scope="default" type="STRING"/>
              </then>
              <else>
                <property expression="$func:paramArray" name="errorVariable" scope="default" type="STRING"/>
              </else>
            </filter>
          </then>
          <else>
            <filter regex="true" source="get-property('USER_ANONYMIZATION')">
              <then>
                <property expression="get-property('MASKED_MSISDN')" name="errorVariable" scope="default" type="STRING"/>
              </then>
              <else>
                <property expression="$func:paramValue" name="errorVariable" scope="default" type="STRING"/>
              </else>
            </filter>
          </else>
        </filter>

        <property name="exceptionType" scope="default" type="STRING" value="SERVICE_EXCEPTION"/>
        <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
      </then>
      <else>



        <filter regex="^true$" source="$trp:api.check.blacklist">
          <then>
            <class name="com.wso2telco.dep.common.mediation.MSISDNBlacklistMediator"/>

            <filter regex="^true$" source="$ctx:INTERNAL_ERROR">
              <then>
                <property expression="fn:concat($func:paramName, $ctx:mediationErrorText)" name="errorText" scope="default" type="STRING"/>
                <property name="exceptionType" scope="default" type="STRING" value="SERVICE_EXCEPTION"/>
                <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
              </then>
              <else>

                <filter regex="^true$" source="$ctx:BLACKLISTED_MSISDN">
                  <then>
                    <property expression="fn:concat($func:paramName, $ctx:mediationErrorText)" name="errorText" scope="default" type="STRING"/>
                    <property name="exceptionType" scope="default" type="STRING" value="POLICY_EXCEPTION"/>
                    <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
                  </then>
                  <else/>
                </filter>

              </else>
            </filter>

          </then>
          <else/>
        </filter>

        <filter regex="^true$" source="$trp:api.check.whitelist">
          <then>
            <class name="com.wso2telco.dep.common.mediation.MSISDNWhitelistMediator"/>

            <filter regex="^true$" source="$ctx:INTERNAL_ERROR">
              <then>
                <property expression="$ctx:messageId" name="messageId" scope="default" type="STRING"/>
                <property expression="fn:concat($func:paramName, $ctx:mediationErrorText)" name="errorText" scope="default" type="STRING"/>
                <property name="exceptionType" scope="default" type="STRING" value="SERVICE_EXCEPTION"/>
                <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
              </then>
              <else>

                <filter regex="^false$" source="$ctx:WHITELISTED_MSISDN">
                  <then>
                    <property expression="$ctx:messageId" name="messageId" scope="default" type="STRING"/>
                    <property expression="fn:concat($func:paramName, $ctx:mediationErrorText)" name="errorText" scope="default" type="STRING"/>
                    <property name="exceptionType" scope="default" type="STRING" value="POLICY_EXCEPTION"/>
                    <sequence key="com.wso2telco.dep.common.response.exceptions.Sequence"/>
                  </then>
                  <else/>
                </filter>

              </else>
            </filter>

          </then>
          <else/>
        </filter>

      </else>
    </filter>

  </sequence>
</template>
